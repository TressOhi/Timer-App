{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","activateWatch","setState","watch","timer","document","getElementsByClassName","style","marginTop","activateTimer","state","className","this","onClick","Component","Watch","startTimer","timerID","setInterval","tick","stopTimer","clearInterval","restartTimer","secs","min","hours","Timer","countDown","timerH","value","timerM","timerS","downCounter","downTick","pauseCounter","color","type","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c9c472c.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport './App.css'\n\nclass App extends Component{\n  constructor (props){\n    super (props);\n    this.state ={\n      watch: \"\",\n      timer: \"\"\n    }\n  }\n  activateWatch=()=>{\n    this.setState({\n      watch: <Watch />,\n      timer:\"\"\n    })\n    document.getElementsByClassName(\"app\")[0].style.marginTop=0;\n  }\n  activateTimer=()=>{\n    this.setState({\n      timer: <Timer />,\n      watch:\"\"\n    })\n    document.getElementsByClassName(\"app\")[0].style.marginTop=0;\n  }\n  render(){\n    return(\n      <div className=\"app\">\n        <div>\n          <div>\n            {this.state.watch}\n          </div>\n          <div>\n          {this.state.timer}\n          </div>\n          <div className=\"navbtns\">\n            <button onClick={this.activateWatch} className=\"stopWatchButton navbtn\">Stop Watch</button>  \n            <button onClick={this.activateTimer} className=\"timerButton navbtn\">Timer</button>\n          </div>\n        </div> \n      </div>\n    );\n  }\n}\n\n\nclass Watch extends Component{\n  constructor (props){\n    super(props);\n    this.state={\n      secs: 0,\n      min: 0,\n      hours: 0\n    }\n  }\n  startTimer=()=>{\n    this.timerID= setInterval( ()=> this.tick(), 1000);\n  }\n  stopTimer=()=>{\n    clearInterval(this.timerID)\n  }\n  restartTimer=()=>{\n    this.setState({\n      secs: 0,\n      min: 0,\n      hours: 0\n    })\n  }\n  tick(){\n    this.setState({\n      secs : this.state.secs + 1\n    })\n    if (this.state.secs===60){\n      this.setState({\n        secs: 0,\n        min : this.state.min + 1\n      })\n    }\n    if (this.state.min===60){\n      this.setState({\n        min: 0,\n        hours : this.state.hours + 1\n      })\n    }\n  }\n  render(){\n    return(\n      <div className=\"counter\">\n        <h2>Counter</h2>\n        <div className=\"roundBorder\">\n          <h1>{this.state.hours+\":\"+this.state.min+\":\"+this.state.secs}</h1>\n        </div>\n        <button onClick={this.startTimer} className=\"counterControl\">Start</button> <button onClick={this.stopTimer} className=\"counterControl\">Stop</button> <button onClick={this.restartTimer} className=\"counterControl\">Clear</button>\n      </div>\n    );\n  }\n}\n\nclass Timer extends Component{\n  constructor (props){\n    super (props);\n    this.state={\n      timerH: 0,\n      timerM:0,\n      timerS:0\n    }\n  }\n  countDown=()=>{\n    this.setState({\n      timerH:document.getElementsByClassName(\"timerHours\")[0].value,\n      timerM:document.getElementsByClassName(\"timerMinutes\")[0].value,\n      timerS:document.getElementsByClassName(\"timerSeconds\")[0].value,\n    })\n  }\n  downCounter=()=>{\n    this.timerID=setInterval( ()=> this.downTick(), 1000)\n  }\n  pauseCounter=()=>{\n    clearInterval(this.timerID);\n  }\n  downTick=()=>{\n    if((this.state.timerS===0) && (this.state.timerM===0) && (this.state.timerH===0)){\n      clearInterval(this.timerID);\n    }\n    if((this.state.timerS===4) && (this.state.timerM===0) && (this.state.timerH)){\n      document.getElementsByClassName(\"currentTime\")[0].style.color=\"red\";\n    }\n    else if(this.state.timerS>3){\n      document.getElementsByClassName(\"currentTime\")[0].style.color=\"white\";\n    }\n    if(this.state.timerS>0){\n      this.setState({\n      timerS: this.state.timerS -1\n    })\n    }\n    if(this.state.timerS==0){\n      if(this.state.timerM >0){\n        this.setState({\n          timerS: 59,\n          timerM: this.state.timerM -1\n        })\n      }\n      else{\n        this.setState({\n          timerS:0\n        })\n      }\n    }\n    if(this.state.timerM==0){\n      if((this.state.timerH >0) && (this.state.timerS ==0)){\n        this.setState({\n          timerM: 60,\n          timerH: this.state.timerH -1\n        })\n      }\n      else{\n        this.setState({\n          timerM:0\n        })\n      }\n    }\n  }\n  render(){\n    return(\n      <div className=\"timer\">\n        <h2>Timer</h2>\n        <div className=\"inputs\">\n          <input type=\"number\" className=\"timerHours\" placeholder=\"H\" />\n          <input type=\"number\" className=\"timerMinutes\" placeholder=\"M\" />\n          <input type=\"number\" className=\"timerSeconds\" placeholder=\"S\" />\n          <button onClick={this.countDown}>Set</button>\n        </div>\n        <div className=\"timerClock\">\n          <div className=\"roundBorder\">\n            <h1 className=\"currentTime\">{this.state.timerH+\":\"+this.state.timerM+\":\"+this.state.timerS}</h1>\n          </div>\n          <button onClick={this.downCounter}>Go</button> <button onClick={this.pauseCounter}>Pause</button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}